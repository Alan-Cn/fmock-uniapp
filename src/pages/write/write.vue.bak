<template>
    <view class="content">
        <navBar :logo="logo" :leftIcon="leftIcon"
                :rightWords="rightWords"
                :title="title"
                @rightClick="rightClick()"
                @leftClick="toBack()">
        </navBar>



        <view class="editor">
            <!--<m-input class="m-input" type="text" clearable focus v-model="postTitle"  placeholder="输入文章标题"></m-input>-->
            <uni-richtext :richList.sync="richList" :uploadUrl="uploadUrl"></uni-richtext>
        </view>

        匿名发布<switch/>
        <button type="primary" class="primary e-font30" @tap="submitPost">发布</button>

    </view>
</template>

<script>
import { mapState, mapActions } from 'vuex'
import navBar from '@/components/nav-bar.vue'
import mInput from '@/components/m-input.vue'
import { uniUploadImage, createPost } from '@/apis/posts'
import uniRichtext from '@/components/uni-richtext.vue'

    export default {
        data() {
            return {
                logo: '',
                leftIcon: 'iconioscloseempty',
                rightWords: '发布',
                title: '发布主题内容',
                postTitle: '',
                anonymous: false,
                type: 'share',

                richList: [],
                uploadUrl:"http://120.78.87.84:8080/conduit/file/uploadFile"
            }
        },
        watch:{
            richList:function (newValue,oldValue) {
                console.log(newValue)
            }
        },
        components: {
            navBar,
            mInput,
            uniRichtext
        },
        computed: {
            ...mapState(['hasBinding', 'hasLogin']),
        },
        onLoad: function () {

            // 在需要登录的地方执行初始化方法
            this.initLoginState()

            // 判断登录状态
            if (!this.hasLogin) {
                this.toLogin()
            }
        },
        onReady: function () {
            this.initQuill()
        },
        methods: {
            ...mapActions(['initLoginState']),

            // 初始化quill
            initQuill() {
                const quill =  {}
                this.editor = quill
            },

            // 处理上传图片 并回显
            imageHandler: function () {
                let that = this
                uni.chooseImage({
                    count: 1, // 默认9
                    sizeType: ['compressed'],    // 可以指定是原图还是压缩图，默认二者都有'original',
                    sourceType: ['album', 'camera'],    // 从相册选择
                    success: function (res) {
                        if (res.tempFilePaths.length) {

                            // 获取图片信息
                            // uni.getImageInfo({
                            //     src: res.tempFilePaths[0],
                            //     success: function (image) {
                            //         // 压缩图片
                            //         console.log(image.width);
                            //         console.log(image.height);
                            //     }
                            // });

                            // 预览图片
                            // uni.previewImage({
                            //     current: res.tempFilePaths[0],
                            //     urls: res.tempFilePaths,
                            //     longPressActions: {
                            //         itemList: ['发送给朋友', '保存图片', '收藏'],
                            //         success: function (res) {
                            //             console.log('选中了第' + (res.tapIndex + 1) + '个按钮');
                            //         },
                            //         fail: function (res) {
                            //             console.log(res.errMsg);
                            //         }
                            //     }
                            // });

                            // 上传文件到服务器
                            that.$loading()
                            uniUploadImage(res.tempFilePaths[0]).then(res => {
                                that.$loading(false)
                                that.insertImage(JSON.parse(res.data).data)
                            }).catch(err => {
                                that.$loading(false)
                                that.$toast('上传失败，请重试')
                            })
                        }
                    }
                })
            },
            // 图片资源回显
            insertImage(url) {
                // let range = this.editor.getSelection();
                // this.editor.insertEmbed(range.index, 'image', url)
            },

            // 发布文章
            submitPost() {
                this.$loading()
                if (this.postTitle.trim()) {
                    let data = {
                        title: this.postTitle.trim(),
                        content: '',//JSON.stringify(this.editor.getContents()),
                        summary: '',//this.editor.getText(0, 80).replace(/\n/g, ' '),
                        poster: '',//this.imgUrlFun(this.editor.root.innerHTML),
                        anonymous: this.anonymous,
                        type: this.type
                    }
                    createPost(data).then(res => {
                        this.$loading(false)
                        this.navToDetails(res.data)
                    }).catch(err => {
                        this.$loading(false)
                    })
                } else {
                    this.$toast('啊嘞！是不是少写了什么')
                }
            },
            // 正则匹配第一幅图片,作为海报传递给后台
            imgUrlFun(str) {
                let data = '';
                str.replace(/<img [^>]*src=['"]([^'"]+)[^>]*>/, function (match, capture) {
                    data =  capture;
                });
                return data
            },
            // 文章详情
            navToDetails(uuid){
                uni.navigateTo({
                    url: `/pages/post/post?id=${uuid}`
                })
            },



            rightClick() {
                console.log('right')
            },
            toLogin() {
                uni.reLaunch({
                    url: '../login/login'
                });
            },
            toBack() {
                uni.navigateBack({
                    delta: 1
                });
            },
        }
    }
</script>

<style scoped>
    .content {
        background: #fff;
        padding: 0;
    }
    .editor {
        height: 85%;
        width: 100%;
    }
</style>
